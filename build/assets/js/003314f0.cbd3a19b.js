"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2945],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>f});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},h=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),p=l(n),g=i,f=p["".concat(c,".").concat(g)]||p[g]||u[g]||o;return n?a.createElement(f,r(r({ref:t},h),{},{components:n})):a.createElement(f,r({ref:t},h))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=g;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:i,r[1]=s;for(var l=2;l<o;l++)r[l]=n[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1956:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(7462),i=(n(7294),n(3905));const o={title:"Using OpenShift Authentication to Secure Access to Backstage",authors:["sabre1041"],tags:["Authentication"],description:"Using OpenShift Authentication to Secure Access to Backstage"},r="Using OpenShift Authentication to Secure Access to Backstage",s={permalink:"/blog/2023/02/20/using-openshift-authentication-to-secure-access-to-backstage",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-02-20-using-openshift-authentication-to-secure-access-to-backstage/index.mdx",source:"@site/blog/2023-02-20-using-openshift-authentication-to-secure-access-to-backstage/index.mdx",title:"Using OpenShift Authentication to Secure Access to Backstage",description:"Using OpenShift Authentication to Secure Access to Backstage",date:"2023-02-20T00:00:00.000Z",formattedDate:"February 20, 2023",tags:[{label:"Authentication",permalink:"/blog/tags/authentication"}],readingTime:7.395,hasTruncateMarker:!1,authors:[{name:"Andrew Block",title:"Maintainer of Janus Helm Charts & Plugin Contributor",url:"https://github.com/sabre1041",imageURL:"https://github.com/sabre1041.png",key:"sabre1041"}],frontMatter:{title:"Using OpenShift Authentication to Secure Access to Backstage",authors:["sabre1041"],tags:["Authentication"],description:"Using OpenShift Authentication to Secure Access to Backstage"},prevItem:{title:"Exploring Quay registry in Backstage",permalink:"/blog/2023/02/20/exploring-quay-registry-in-backstage"},nextItem:{title:"Deploying Backstage onto OpenShift Using the Backstage Helm Chart",permalink:"/blog/2023/02/17/deploying-backstage-onto-openshift-using-helm"}},c={authorsImageUrls:[void 0]},l=[{value:"Enabling OpenShift Authentication",id:"enabling-openshift-authentication",level:2},{value:"OAuth Client Configuration",id:"oauth-client-configuration",level:3},{value:"TLS Certificate Management",id:"tls-certificate-management",level:3},{value:"Ingress Configuration",id:"ingress-configuration",level:3},{value:"Deploying the Backstage Helm Chart",id:"deploying-the-backstage-helm-chart",level:2}],h={toc:l},p="wrapper";function u(e){let{components:t,...o}=e;return(0,i.kt)(p,(0,a.Z)({},h,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Backstage is a tool for building Internal Development Platforms and includes the flexibility to be deployed within a variety of operating environments, including containers. In prior articles, it was introduced how the deployment of Backstage within Kubernetes environments can be streamlined through the use of the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/backstage/charts/tree/main/charts/backstage"},"Backstage Helm chart")," as well as integrating the platform into identity stores, such as Keycloak. OpenShift is a common deployment target for running Backstage as it provides enterprise grade container orchestration and one of its capabilities is the  ability to integrate with a variety of Identity Providers. Since many users of Backstage also use OpenShift to build and deploy containerized workloads, there is a desire to more closely tie into existing workflows and access models. This article introduces how Backstage can be integrated with OpenShift\u2019s existing authentication capabilities to provide a seamless path for users to access the Backstage portal."),(0,i.kt)("p",null,"In addition to the base platform, OpenShift also includes a number of additional features that enhance not only how administrators, but developers work with the platform and include those that support GitOps and multicluster workflows just to name a few. Many of these same components also provide their own user interface which expose their capabilities. To enable ease of use, access is granted using the same authentication mechanisms as the OpenShift cluster itself using a workflow similar to the native OpenShift console. The ability to authenticate to applications using the same set of credentials as OpenShift itself is facilitated through the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/openshift/oauth-proxy"},"OpenShift oauth-proxy")," -- a separate container running within the same pod, using the sidecar pattern, which intercepts requests and interacts with the OpenShift platform to restrict access to facilitate the authentication process."),(0,i.kt)("h2",{id:"enabling-openshift-authentication"},"Enabling OpenShift Authentication"),(0,i.kt)("p",null,"As described in the article, ",(0,i.kt)("a",{parentName:"p",href:"/blog/2023/01/17/enabling-keycloak-authentication-in-backstage"},"Enabling Keycloak Authentication in Backstage"),", support is available within Backstage to utilize an OAuth proxy container to restrict access to the platform. The same approach can be used for OpenShift as well. The key difference is that instead of using a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/oauth2-proxy/oauth2-proxy"},"generic oauth2-proxy")," container, the OpenShift oauth-proxy container is used as it has features designed specifically for OpenShift. Thanks to the versatility of the Backstage Helm chart, the other changes that need to be made to enable this feature is to the content of the Values."),(0,i.kt)("p",null,"Generally, the use of the OpenShift OAuth proxy requires the following to be configured:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"An OAuth client to communicate with OpenShift"),(0,i.kt)("li",{parentName:"ol"},"TLS certificates to expose the OAuth container"),(0,i.kt)("li",{parentName:"ol"},"Configure the Route that is exposed by the OpenShift ingress router")),(0,i.kt)("p",null,"Let\u2019s describe how to enable each of these configurations."),(0,i.kt)("h3",{id:"oauth-client-configuration"},"OAuth Client Configuration"),(0,i.kt)("p",null,"OpenShift provides two methods for registering a new OAuth client:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Creating a OAuthClient Custom Resource"),(0,i.kt)("li",{parentName:"ol"},"Using a Service Account as an OAuth client")),(0,i.kt)("p",null,"The former is commonly used by cluster services, such as the OpenShift web console, but has the disadvantage of a cluster scoped resource, thus requiring elevated access. The latter is more applicable in this use case as a standard OpenShift Service Account can perform the function of acting as an OAuth client. All that is required to enable such functionality is adding an annotation with the key ",(0,i.kt)("inlineCode",{parentName:"p"},"serviceaccounts.openshift.io/oauth-redirecturi.<name>")," to the Service Account with the location of the redirect URI. For the case of the OpenShift OAuth proxy, it would be at the ",(0,i.kt)("inlineCode",{parentName:"p"},"/oauth/callback")," context path."),(0,i.kt)("p",null,"This capability can be enabled by setting the following Helm values."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'serviceAccount:\n  create: true\n  annotations:\n    serviceaccounts.openshift.io/oauth-redirecturi.backstage: "https://{{ .Values.ingress.host }}/oauth/callback"\n')),(0,i.kt)("h3",{id:"tls-certificate-management"},"TLS Certificate Management"),(0,i.kt)("p",null,"There are multiple methods for which TLS certificates can be configured within OpenShift. They could be provided by the end user or by way of an operator, such as ",(0,i.kt)("a",{parentName:"p",href:"https://docs.openshift.com/container-platform/4.12/security/cert_manager_operator/cert-manager-operator-install.html"},"cert-manager"),", which can integrate with an external certificate management tool or generate certificates of its own. OpenShift also includes support for automatically generating and injecting certificates into applications through the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.openshift.com/container-platform/4.12/security/certificates/service-serving-certificate.html"},"Service Serving Certificate")," feature. The ",(0,i.kt)("inlineCode",{parentName:"p"},"service-ca")," monitors annotations placed upon OpenShift ",(0,i.kt)("inlineCode",{parentName:"p"},"Service")," resources. When a Service with the annotation ",(0,i.kt)("inlineCode",{parentName:"p"},"service.beta.openshift.io/serving-cert-secret-name=&lt;name>")," is created, the controller generates a certificate and its associated private key within a ",(0,i.kt)("inlineCode",{parentName:"p"},"Secret"),"."),(0,i.kt)("p",null,"To have OpenShift generate certificate within a Secret called ",(0,i.kt)("inlineCode",{parentName:"p"},"backstage-tls")," which can be configured within the OAuth proxy, the following Helm values can be specified:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"service:\n  annotations:\n    service.alpha.openshift.io/serving-cert-secret-name: backstage-tls\n")),(0,i.kt)("h3",{id:"ingress-configuration"},"Ingress Configuration"),(0,i.kt)("p",null,"The ability to expose applications running within OpenShift externally has been one of the most compelling features included within OpenShift ever since the early days of version 3. ",(0,i.kt)("inlineCode",{parentName:"p"},"Routes"),", the predecessor to the native Kubernetes ",(0,i.kt)("inlineCode",{parentName:"p"},"Ingress")," resource, has enabled such functionality and it continues to this day. However, more and more applications are favoring the native Kubernetes ",(0,i.kt)("inlineCode",{parentName:"p"},"Ingress")," option over the OpenShift specific ",(0,i.kt)("inlineCode",{parentName:"p"},"Route"),"."),(0,i.kt)("p",null,'Fortunately, OpenShift can automatically "upconvert" Kubernetes native ',(0,i.kt)("inlineCode",{parentName:"p"},"Ingress")," resources to OpenShift ",(0,i.kt)("inlineCode",{parentName:"p"},"Routes"),". In addition, the upconversion can be customized. In particular, the TLS termination type to configure end-to-end secure transport. As described in the prior section, the OAuth proxy is secured using a certificate provided by the Service Serving Certificate feature. While this certificate is generated by a Certificate Authority that is trusted within OpenShift, end users would not be able to trust such certificates."),(0,i.kt)("p",null,"To work around this challenge, the generated ",(0,i.kt)("inlineCode",{parentName:"p"},"Route")," that is created from an ",(0,i.kt)("inlineCode",{parentName:"p"},"Ingress")," resource can be configured with a TLS termination type of ",(0,i.kt)("inlineCode",{parentName:"p"},"reencrypt"),". TLS communication is terminated at the Ingress router and reencrypted for transport to the underlying pod. Since OpenShift assets trust the certificate that is used by the service-ca controller, trust is established for the final leg of communication enabling a fully trusted path from client to server."),(0,i.kt)("p",null,"Similar to the enablement of the Service Account as a OAuth Client and the Service Service Certificate feature, an annotation can be placed on an ",(0,i.kt)("inlineCode",{parentName:"p"},"Ingress")," resource with the key ",(0,i.kt)("inlineCode",{parentName:"p"},"route.openshift.io/termination")," with the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"reencrypt")," to set up the ",(0,i.kt)("inlineCode",{parentName:"p"},"Route")," to expose the Backstage instance. "),(0,i.kt)("p",null,"The following Helm values can be specified to configure the ",(0,i.kt)("inlineCode",{parentName:"p"},"Ingress")," resource:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'ingress:\n  enabled: true\n  host: backstage.apps.example.com\n  annotations:\n    route.openshift.io/termination: "reencrypt"\n')),(0,i.kt)("h2",{id:"deploying-the-backstage-helm-chart"},"Deploying the Backstage Helm Chart"),(0,i.kt)("p",null,"With the primary changes called out, the final step is to declare the full set of customized Helm values and to deploy the instance of Backstage using the Backstage Helm chart."),(0,i.kt)("p",null,"Create a file called ",(0,i.kt)("inlineCode",{parentName:"p"},"values-backstage-openshift-auth.yaml")," with the following content:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'filename="values-backstage-openshift-auth.yaml"',filename:'"values-backstage-openshift-auth.yaml"'},'backstage:\n  image:\n    registry: quay.io\n    repository: ablock/backstage-oauth\n    tag: latest\n  extraEnvVars:\n    - name: "APP_CONFIG_app_baseUrl"\n      value: "https://{{ .Values.ingress.host }}"\n    - name: "APP_CONFIG_backend_baseUrl"\n      value: "https://{{ .Values.ingress.host }}"\n    - name: "APP_CONFIG_backend_cors_origin"\n      value: "https://{{ .Values.ingress.host }}"\n  installDir: /opt/app-root/src\n\n  extraContainers:\n    - name: oauth-proxy \n      args:\n        - -provider=openshift\n        - -https-address=:8888\n        - -http-address=\n        - -email-domain=*\n        - -upstream=http://localhost:7007\n        - -tls-cert=/etc/tls/private/tls.crt\n        - -tls-key=/etc/tls/private/tls.key\n        - -cookie-secret="{{ default (randAlpha 32 | lower | b64enc) .Values.oauthProxy.cookieSecret }}"\n        - -openshift-service-account={{ include "common.names.fullname" . }}\n        - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        - -skip-auth-regex=^/metrics\n        - -skip-provider-button\n        - -request-logging=true\n      image: registry.redhat.io/openshift4/ose-oauth-proxy:v4.12\n      imagePullPolicy: IfNotPresent\n      ports:\n        - name: oauth-proxy\n          containerPort: 8888    \n          protocol: TCP\n      volumeMounts:\n        - mountPath: /etc/tls/private\n          name: backstage-tls\n\n  extraVolumeMounts:\n    - mountPath: /tmp/fakepath\n      name: backstage-tls\n\n  extraVolumes:\n    - name: backstage-tls\n      secret:\n        defaultMode: 420\n        secretName: backstage-tls\n\nservice:\n  annotations:\n    service.alpha.openshift.io/serving-cert-secret-name: backstage-tls\n  ports:\n    backend: 8888\n    targetPort: oauth-proxy\n\nserviceAccount:\n  create: true\n  annotations:\n    serviceaccounts.openshift.io/oauth-redirecturi.backstage: "https://{{ .Values.ingress.host }}/oauth/callback"\n\ningress:\n  enabled: true\n  host: backstage.apps.example.com\n  annotations:\n    route.openshift.io/termination: "reencrypt"\n\noauthProxy:\n  cookieSecret: ""\n')),(0,i.kt)("p",null,"Be sure to update the ",(0,i.kt)("inlineCode",{parentName:"p"},"ingress.host")," property with the desired exposed hostname for Backstage."),(0,i.kt)("p",null,"The majority of the values have been reused from prior articles on this subject aside from those that were highlighted in the previous sections as well as the ",(0,i.kt)("inlineCode",{parentName:"p"},"extraContainers")," property which contains the definition for the oauth-proxy container. Also note that none of the customizations as it pertains to the PostgreSQL database supporting Backstage has been defined either resulting in an ephemeral deployment for demonstration purposes. Consult the prior articles, specifically ",(0,i.kt)("a",{parentName:"p",href:"/blog/2023/01/25/exploring-the-flexibility-of-the-backstage-helm-chart"},"Exploring the Flexibility of the Backstage Helm Chart"),", for steps on how to customize the Backstage deploying using the Helm chart along with configuring your machine with the necessary Helm dependencies."),(0,i.kt)("p",null,"Install the chart by executing the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"helm install -n backstage --create-namespace backstage backstage/backstage -f values-backstage-openshift-auth.yaml\n")),(0,i.kt)("p",null,"Once the chart has been installed, open a web browser and navigate to the hostname as defined by the hostname within the Ingress resource. You should be presented with the familiar OpenShift login page for which you may be able to select the appropriate identity provider (if multiple are defined) as well as providing your credentials to complete the authentication process. "),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"OpenShift login page",src:n(2853).Z,width:"512",height:"330"})),(0,i.kt)("p",null,"Once authenticated, you will be presented with the Backstage dashboard. Click the ",(0,i.kt)("strong",{parentName:"p"},"Settings")," button on the bottom left side of the page to view information related to the current authenticated user to confirm the integration with OpenShift was successful."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Backstage Settings - Profile identity",src:n(3734).Z,width:"512",height:"288"})),(0,i.kt)("p",null,"With minimal effort whatsoever and by modifying a few values within the Backstage Helm chart, Backstage was secured. Only those with accounts in OpenShift have the ability to access the portal. When used in conjunction with other integrations, such as the importing of organizational details from external sources, features and capabilities within Backstage can be enabled based on their access level, providing a simplified user experience that enables productivity."))}u.isMDXComponent=!0},3734:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/backstage-profile-identity-53d409937bcdf275e16c02182a28fb9f.png"},2853:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/openshift-login-824a761add056279dafac3488f1c48a6.png"}}]);