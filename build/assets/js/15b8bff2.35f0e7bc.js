"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[132],{3905:(e,t,a)=>{a.d(t,{Zo:()=>h,kt:()=>d});var n=a(7294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},h=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},g="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,h=r(e,["components","mdxType","originalType","parentName"]),g=c(a),u=s,d=g["".concat(l,".").concat(u)]||g[u]||p[u]||i;return a?n.createElement(d,o(o({ref:t},h),{},{components:a})):n.createElement(d,o({ref:t},h))}));function d(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=a.length,o=new Array(i);o[0]=u;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[g]="string"==typeof e?e:s,o[1]=r;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6773:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var n=a(7462),s=(a(7294),a(3905));const i={title:"Exploring the Flexibility of the Backstage Helm Chart",authors:["sabre1041"],tags:["Helm"],description:"Exploring the Flexibility of the Backstage Helm Chart"},o="Exploring the Flexibility of the Backstage Helm Chart",r={permalink:"/blog/2023/01/25/exploring-the-flexibility-of-the-backstage-helm-chart",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-01-25-exploring-the-flexibility-of-the-backstage-helm-chart/index.mdx",source:"@site/blog/2023-01-25-exploring-the-flexibility-of-the-backstage-helm-chart/index.mdx",title:"Exploring the Flexibility of the Backstage Helm Chart",description:"Exploring the Flexibility of the Backstage Helm Chart",date:"2023-01-25T00:00:00.000Z",formattedDate:"January 25, 2023",tags:[{label:"Helm",permalink:"/blog/tags/helm"}],readingTime:10.58,hasTruncateMarker:!1,authors:[{name:"Andrew Block",title:"Maintainer of Janus Helm Charts & Plugin Contributor",url:"https://github.com/sabre1041",imageURL:"https://github.com/sabre1041.png",key:"sabre1041"}],frontMatter:{title:"Exploring the Flexibility of the Backstage Helm Chart",authors:["sabre1041"],tags:["Helm"],description:"Exploring the Flexibility of the Backstage Helm Chart"},prevItem:{title:"Ingesting Keycloak Organizational Data into the Backstage Catalog",permalink:"/blog/2023/02/06/ingesting-keycloak-org-data-into-the-backstage-catalog"},nextItem:{title:"Enabling Keycloak Authentication in Backstage",permalink:"/blog/2023/01/17/enabling-keycloak-authentication-in-backstage"}},l={authorsImageUrls:[void 0]},c=[{value:"Ingress",id:"ingress",level:2},{value:"Connecting through the Minikube Ingress Controller",id:"connecting-through-the-minikube-ingress-controller",level:3},{value:"Accessing Backstage through the Minikube Ingress Controller",id:"accessing-backstage-through-the-minikube-ingress-controller",level:3},{value:"Persistence",id:"persistence",level:2},{value:"Replacing the Default Images",id:"replacing-the-default-images",level:2},{value:"Customizing the PostgreSQL Configuration",id:"customizing-the-postgresql-configuration",level:2}],h={toc:c},g="wrapper";function p(e){let{components:t,...a}=e;return(0,s.kt)(g,(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Getting Backstage up and running takes no time at all thanks to the Backstage Helm chart as described in the ",(0,s.kt)("a",{parentName:"p",href:"/blog/2023/01/15/getting-started-with-the-backstage-helm-chart"},"first article")," in this series. However, even though Backstage has been deployed, it is hardly ready in its current state for production use. There are several key factors that need to be addressed:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Exposing Backstage properly outside the cluster"),(0,s.kt)("li",{parentName:"ol"},"Adding persistence")),(0,s.kt)("h2",{id:"ingress"},"Ingress"),(0,s.kt)("p",null,"Accessing the Backstage instance as part of the initial deployment made use of the ",(0,s.kt)("inlineCode",{parentName:"p"},"kubectl port-forward{:bash}")," command, which is a key tool that is used as part of the development process. However, in order to make a deployment more representative of how Backstage would need to be configured for a production state, a proper Ingress strategy should be implemented."),(0,s.kt)("p",null,"Minikube includes a set of features that extend the baseline configuration of Kubernetes, known as ",(0,s.kt)("a",{parentName:"p",href:"https://minikube.sigs.k8s.io/docs/commands/addons/"},"addons"),". Included in the collection of minikube addons is support for deploying the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/kubernetes/ingress-nginx"},"NGINX Ingress Controller")," to enable more native access to resources within Kubernetes."),(0,s.kt)("p",null,"Execute the following command to enable the ingress addon which will deploy the NGINX Ingress Controller into a namespace called ",(0,s.kt)("inlineCode",{parentName:"p"},"ingress-nginx"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"minikube addons enable ingress\n")),(0,s.kt)("h3",{id:"connecting-through-the-minikube-ingress-controller"},"Connecting through the Minikube Ingress Controller"),(0,s.kt)("p",null,"Access to resources deployed within Kubernetes through the ingress controller varies depending on the host operating system. On linux machines which can run containers natively, access can be achieved through the ip address in use by the ",(0,s.kt)("inlineCode",{parentName:"p"},"minikube")," virtual machine. This address can be obtained by running the ",(0,s.kt)("inlineCode",{parentName:"p"},"minikube ip{:bash}")," command."),(0,s.kt)("p",null,"On OSX machines, a tunnel can be created for which connectivity can be achieved through the ingress controller using the minikube tunnel command. Since this will expose the tunnel on ports 80 and 443, elevated permissions are needed. A password prompt will appear requesting permission to access these privileged ports."),(0,s.kt)("h3",{id:"accessing-backstage-through-the-minikube-ingress-controller"},"Accessing Backstage through the Minikube Ingress Controller"),(0,s.kt)("p",null,"To configure Backstage to expose an Ingress through the newly created ingress controller, update the content of the values that are used for the Backstage Helm chart by creating a new values file called ",(0,s.kt)("inlineCode",{parentName:"p"},"values-minikube-ingress.yaml")," with the following content:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'filename="values-minikube-ingress.yaml"',filename:'"values-minikube-ingress.yaml"'},"backstage:\n  extraEnvVars:\n    - name: 'APP_CONFIG_app_baseUrl'\n      value: 'http://{{ .Values.ingress.host }}'\n    - name: 'APP_CONFIG_backend_baseUrl'\n      value: 'http://{{ .Values.ingress.host }}'\n    - name: 'APP_CONFIG_backend_cors_origin'\n      value: 'http://{{ .Values.ingress.host }}`'\n\ningress:\n  enabled: true\n  host: localhost\n")),(0,s.kt)("p",null,"The only noticeable difference between the content of these values versus the prior content contained in the ",(0,s.kt)("inlineCode",{parentName:"p"},"values-minikube-ingress.yaml")," is enabling the creation of the Ingress resource which is triggered by setting the enabled field within the ingress property to true."),(0,s.kt)("p",null,"For those making use of a Linux machine, since the ingress controller is accessed through the IP address of the minikube VM, a fake hostname (backstage.minikube.info) can be created by setting the following value in the ",(0,s.kt)("inlineCode",{parentName:"p"},"/etc/hosts")," file."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"$(minikube ip) backstage.minikube.info\n")),(0,s.kt)("p",null,"Alternatively, a wildcard IP address DNS service, such as nip.io can be used if there was a desire to avoid modifying the ",(0,s.kt)("inlineCode",{parentName:"p"},"/etc/hosts")," file."),(0,s.kt)("p",null,"Regardless of the approach, when using a Linux machine, update the value of the host field within the ingress property in the ",(0,s.kt)("inlineCode",{parentName:"p"},"values-minikube-ingress.yaml")," file to the hostname configured above."),(0,s.kt)("p",null,"Create a new Helm release by performing an upgrade of the prior release by providing the updated values file as shown below:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"helm upgrade -n backstage backstage backstage/backstage -f values-minikube-ingress.yaml\n")),(0,s.kt)("p",null,"Once the release is complete, a new Ingress resource will have been created in the backstage namespace to expose Backstage outside the cluster."),(0,s.kt)("p",null,"Navigate to the hostname that was defined in the Ingress resource. Due to caching techniques employed by many web browsers, a \u201chard reload\u201d of the page may be required in order to ensure the updated set of Javascript resources from the Backstage instance. Consult the documentation of the browser being used for the necessary steps."),(0,s.kt)("p",null,"By exposing and accessing Backstage through a Kubernetes Ingress, it better aligns to how one would want to configure Backstage for a production deployment."),(0,s.kt)("h2",{id:"persistence"},"Persistence"),(0,s.kt)("p",null,"To simplify the getting started experience for users, Backstage makes use of an in-memory SQLite database as a persistent store. While this reduces the initial barrier of entry, it also limits how far one can go in their Backstage journey. Limitations with this implementation include the ability to achieve high-availability as each instance of Backstage has its own independent persistent store and existing data would be lost if the pod is restarted or deleted."),(0,s.kt)("p",null,"PostgreSQL is the database backend that is used by Backstage store data persistently and the Backstage Helm chart includes the ability to provision a deployment of PostgreSQL in order to support Backstage. The ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/bitnami/charts/tree/main/bitnami/postgresql"},"postgres Helm chart from Bitnami")," as a ",(0,s.kt)("a",{parentName:"p",href:"https://helm.sh/docs/chart_best_practices/dependencies/"},"dependency chart")," which is, as demonstrated previously, disabled by default. Similar to how ingress was enabled in the prior section, enabling and configuring the integration between PostgreSQL and Backstage can be achieved through the Backstage Helm chart."),(0,s.kt)("p",null,"Create a new values file called ",(0,s.kt)("inlineCode",{parentName:"p"},"values-minikube-persistent.yaml")," with the following content:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'filename="values-minikube-persistent.yaml"',filename:'"values-minikube-persistent.yaml"'},"backstage:\n  extraEnvVars:\n    - name: 'APP_CONFIG_app_baseUrl'\n      value: 'http://{{ .Values.ingress.host }}'\n    - name: 'APP_CONFIG_backend_baseUrl'\n      value: 'http://{{ .Values.ingress.host }}'\n    - name: 'APP_CONFIG_backend_cors_origin'\n      value: 'http://{{ .Values.ingress.host }}'\n  args:\n    - '--config'\n    - '/app/app-config.yaml'\n    - '--config'\n    - '/app/app-config.production.yaml'\n\ningress:\n  enabled: true\n  host: localhost\n\npostgresql:\n  enabled: true\n  auth:\n    username: bn_backstage\n    database: backstage\n  primary:\n    persistence:\n      enabled: true\n")),(0,s.kt)("p",null,"While no changes occurred within the set of extra environment variables, several new properties were added; specifically ",(0,s.kt)("inlineCode",{parentName:"p"},"args")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"postgresql"),". Setting ",(0,s.kt)("inlineCode",{parentName:"p"},"postgresql.enabled")," will trigger the installation of the postgresql chart as defined in the ",(0,s.kt)("inlineCode",{parentName:"p"},"Chart.yaml")," file. The ",(0,s.kt)("inlineCode",{parentName:"p"},"postgresql")," section also specifies the username and database that should be created on the PostgreSQL instance along with the creation of a PersistentVolumeClaim within Kubernetes that will serve as the backing storage for the database."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"backstage.args")," property is used to specify the container arguments that are injected into the Backstage container. When an installation of Backstage is created, several sample application configuration files are created: One that contains the baseline configuration for Backstage, one that features configurations that are designed for production use and one that can be used to specify configurations that are used for local development. The production configuration file (",(0,s.kt)("inlineCode",{parentName:"p"},"app-config.production.yaml"),") includes the necessary configurations to enable Backstage to use PostgreSQL as its persistence store. The location of these configuration files are added as arguments using the ",(0,s.kt)("inlineCode",{parentName:"p"},"--config")," flag as declared in values file sample above."),(0,s.kt)("p",null,"Several options are available within the Bitnami postgres chart to set the password for the newly created database use including providing it within a Kubernetes secret, explicitly as a Helm Value, or having one automatically generated which is the option that will be chosen in this case. There is one disadvantage to having the chart automatically generate the password; The ",(0,s.kt)("inlineCode",{parentName:"p"},"helm upgrade")," command cannot be used as each invocation would result in a newly generated password, thus invalidating the prior value and causing issues for clients looking to connect."),(0,s.kt)("p",null,"As a result, uninstall the previously created chart from the minikube cluster by executing the following command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"helm uninstall -n backstage backstage\n")),(0,s.kt)("p",null,"With the chart now uninstalled and the resources removed from the cluster, install a brand new instance of Backstage with persistence support by executing the following command. In addition, be sure to update the ",(0,s.kt)("inlineCode",{parentName:"p"},"host")," field underneath the ",(0,s.kt)("inlineCode",{parentName:"p"},"ingress")," property if a different value was used from the Ingress section of this article."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"helm install -n backstage backstage backstage/backstage -f values-minikube-persistent.yaml\n")),(0,s.kt)("p",null,"Once the release is complete, there will be two pods in the backstage namespace: one for the instance of backstage and the other for PostgreSQL. Confirm that the Backstage instance has connected and created the necessary tables within PostgreSQL by executing the following command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl exec -it -n backstage statefulset/backstage-postgresql -- sh -c \"export PGPASSWORD=$(kubectl get secrets -n backstage backstage-postgresql  -o jsonpath='{.data.postgres-password}' | base64 -d) && psql --host localhost -U postgres -c '\\l'\"\n")),(0,s.kt)("p",null,"Several tables prefixed with \u201cbackstage\u201d should be present and once confirmed, one has the assurance Backstage is making use of the PostgreSQL instance and storing data persistently."),(0,s.kt)("h2",{id:"replacing-the-default-images"},"Replacing the Default Images"),(0,s.kt)("p",null,"One of the most common tasks for anyone working with Backstage is the customization of the components that are installed within the Backstage instance. This typically includes the addition of plugins that extend the baseline functionality of Backstage to enable the integration with external systems. The Backstage Helm chart references a container image from the Backstage community, but in many cases, does not include all of the components that may be needed by consumers. As a result, those looking to use Backstage in their own environment will need to produce their own instance of Backstage and store the resulting image in a container registry. The location of this instance can be specified as a set of Helm values to enable users to leverage their own image."),(0,s.kt)("p",null,"The Janus community also produces a minimal container image, similar to the upstream backstage community, to provide an instance of Backstage that is built from an Universal Base Image (UBI) base. Switching from the upstream Backstage image to the Janus project image can be used to demonstrate the common task of replacing where the container image of Backstage is sourced from."),(0,s.kt)("p",null,"The following values illustrate how to switch to the Janus provided image. Keep in mind that in practice, you will most likely need to use an image of your own with your specific customizations, but this provides a good example for understanding the process involved."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"backstage:\n  image:\n    registry: ghcr.io\n    repository: janus-idp/redhat-backstage-build\n    tag: latest\n")),(0,s.kt)("p",null,"Any of the Helm values files that were provided in the prior sections can be used to demonstrate substituting the location of the Backstage image."),(0,s.kt)("p",null,"Each Backstage image can feature a different database schema, therefore if an existing Helm release has been deployed previously with postgresql enabled, uninstall it so that the new configurations can be applied. In addition, if persistent storage was used to support PostgreSQL, the PersistentVolumeClaim that was also created needs to be manually removed. This can be achieved using the following command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl delete pvc -n backstage -l=app.kubernetes.io/name=postgresql\n")),(0,s.kt)("p",null,"Once all of the resources have been removed, use the Backstage Helm chart to deploy Backstage with the updated set of values. Confirm the image associated with the Backstage deployment is leveraging the custom image by executing the following command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get deployment -n backstage backstage -o jsonpath='{ .spec.template.spec.containers[?(@.name==\"backstage-backend\")].image }'\n")),(0,s.kt)("h2",{id:"customizing-the-postgresql-configuration"},"Customizing the PostgreSQL Configuration"),(0,s.kt)("p",null,"Similar to the Backstage image itself, the image associated with the PostgreSQL instance can also be customized if there was a desire to make use of an alternate image other than the image provided by the Bitnami postgres Helm chart. Given that the Janus community is a Red Hat sponsored initiative, switching to a PostgreSQL image that is provided from ",(0,s.kt)("a",{parentName:"p",href:"https://www.redhat.com/en/resources/red-hat-software-collections"},"Red Hat Software Collections")," is a common task. Fortunately, the combination of features provided by the Backstage and Bitnami postgres Helm charts enable not only the customization of image location, but additional configurations that are needed to support any other required configurations needed to support an alternate image."),(0,s.kt)("p",null,"Create a new values file called ",(0,s.kt)("inlineCode",{parentName:"p"},"values-minikube-persistent-scl.yaml")," with the following content:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'backstage:\n  extraEnvVars:\n    - name: "APP_CONFIG_app_baseUrl"\n      value: "http://{{ .Values.ingress.host }}"\n    - name: "APP_CONFIG_backend_baseUrl"\n      value: "http://{{ .Values.ingress.host }}"\n    - name: "APP_CONFIG_backend_cors_origin"\n      value: "http://{{ .Values.ingress.host }}"\n    - name: "APP_CONFIG_backend_database_connection_password" (1)\n      valueFrom:\n        secretKeyRef:\n          key: postgres-password\n          name: "{{ include \\"backstage.postgresql.fullname\\" . }}"\n  args:\n    - "--config"\n    - "/app/app-config.yaml"\n    - "--config"\n    - "/app/app-config.production.yaml"\n\ningress:\n  enabled: true\n  host: localhost\n\npostgresql:\n  enabled: true\n  database: backstage\n  postgresqlDataDir: /var/lib/pgsql/data/userdata (2)\n  auth: (3)\n    username: postgres\n    database: backstage\n  image: (4)\n    registry: quay.io\n    repository: fedora/postgresql-13\n    tag: "13"\n  primary:\n    securityContext:\n      enabled: false\n    podSecurityContext:\n      enabled: false\n    containerSecurityContext:\n      enabled: false\n    persistence:\n      enabled: true\n      mountPath: /var/lib/pgsql/data\n    extraEnvVars:\n    - name: POSTGRESQL_ADMIN_PASSWORD (5)\n      valueFrom:\n        secretKeyRef:\n          key: postgres-password\n          name: backstage-postgresql\n')),(0,s.kt)("p",null,"There are quite a number of additional configurations that are included within this values file. Let's break down some of the most important configurations to illustrate their significance:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"The Software Collections PostgreSQL image manages permissions differently than the Bitnami PostgreSQL image and the key within the generated Secret differs and needs to be provided for the Backstage container"),(0,s.kt)("li",{parentName:"ol"},"Specifies the location of where PostgreSQL stores persistent content"),(0,s.kt)("li",{parentName:"ol"},"The name of the database to use and user to authenticate against"),(0,s.kt)("li",{parentName:"ol"},"The location of the Software Collections image"),(0,s.kt)("li",{parentName:"ol"},"The environment variable used by the Software Collections PostgreSQL image to signify the password for the postgres admin account")),(0,s.kt)("p",null,"Uninstall and reinstall the Backstage Helm chart once again so that the Software Collections image will be used to support PostgreSQL."),(0,s.kt)("p",null,"As demonstrated throughout this article, the Helm chart for Backstage provides a robust set of capabilities in order to support customizing and orchestrating a deployment to a Kubernetes environment. By simplifying the steps that it takes to deploy Backstage, the benefits when establishing an Internal Development Platform can be realized."))}p.isMDXComponent=!0}}]);